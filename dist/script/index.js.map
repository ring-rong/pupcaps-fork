{"version":3,"file":"index.js","sources":["../../node_modules/@commander-js/extra-typings/index.js","../../node_modules/@commander-js/extra-typings/esm.mjs","../../src/script/assets.ts","../../src/script/cli.ts","../../src/script/work-dir.ts","../../src/script/stats-printer.ts","../../src/script/abstract-renderer.ts","../../src/script/step-renderer.ts","../../src/script/abstract-recorder.ts","../../src/script/real-time-recorder.ts","../../src/script/fps-ticker.ts","../../src/script/real-time-renderer.ts","../../src/common/timecodes.ts","../../src/common/captions.ts","../../src/script/step-recorder.ts","../../src/common/web-server.ts","../../src/script/index.ts"],"sourcesContent":["const commander = require('commander');\n\nexports = module.exports = {};\n\n// Return a different global program than commander,\n// and don't also return it as default export.\nexports.program = new commander.Command();\n\n/**\n * Expose classes. The FooT versions are just types, so return Commander original implementations!\n */\n\nexports.Argument = commander.Argument;\nexports.Command = commander.Command;\nexports.CommanderError = commander.CommanderError;\nexports.Help = commander.Help;\nexports.InvalidArgumentError = commander.InvalidArgumentError;\nexports.InvalidOptionArgumentError = commander.InvalidArgumentError; // Deprecated\nexports.Option = commander.Option;\n\n// In Commander, the create routines end up being aliases for the matching\n// methods on the global program due to the (deprecated) legacy default export.\n// Here we roll our own, the way Commander might in future.\nexports.createCommand = (name) => new commander.Command(name);\nexports.createOption = (flags, description) =>\n  new commander.Option(flags, description);\nexports.createArgument = (name, description) =>\n  new commander.Argument(name, description);\n","import extraTypingsCommander from './index.js';\n\n// wrapper to provide named exports for ESM.\nexport const {\n  program,\n  createCommand,\n  createArgument,\n  createOption,\n  CommanderError,\n  InvalidArgumentError,\n  InvalidOptionArgumentError, // deprecated old name\n  Command,\n  Argument,\n  Option,\n  Help,\n} = extraTypingsCommander;\n","import * as path from 'path';\n\nexport const assetsFolder = path.join(__dirname, '..', '..', 'assets');\nexport const defaultStylesCss = path.join(assetsFolder, 'captions.css');\nexport const indexHtml = path.join(assetsFolder, 'index.html');\n\nexport const indexJs = path.join(__dirname, '..', 'player', 'index.js');\n\nexport const nodeModules = path.join(__dirname, '..', '..', 'node_modules');\n","import {Command} from '@commander-js/extra-typings';\nimport packageJson from '../../package.json';\nimport {defaultStylesCss, assetsFolder} from './assets';\nimport * as cliProgress from 'cli-progress';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nexport interface Args {\n    srtInputFile: string;\n    movOutputFile: string;\n    videoWidth: number;\n    videoHeight: number;\n    fps: number;\n    styleFile: string;\n    css3Animations: boolean;\n    isPreview: boolean;\n}\n\nfunction parseIntAndAssert(...assertions: ((v: number) => void)[]): (v: string) => number {\n    return (value: string) => {\n        const int = parseInt(value, 10);\n        assertions.forEach(assertion => assertion(int));\n        return int;\n    }\n}\n\nfunction assertPositive(option: string): (v: number) => void {\n    return (value: number) => {\n        if (value < 0) {\n            throw new Error(`${option} should be positive!`);\n        }\n    };\n}\n\nfunction assertMinMax(option: string, min: number, max: number): (v: number) => void {\n    return (value: number) => {\n        if (value < min || value > max) {\n            throw new Error(`${option} should be between ${min} and ${max}!`);\n        }\n    };\n}\n\nfunction assertFileExtension(ext: string): (v: string) => void {\n    return (value: string) => {\n        if (!value.endsWith(ext)) {\n            throw new Error(`File should have extension ${ext}!`);\n        }\n        return value;\n    };\n}\n\nfunction validateStyleOption(value: string): string {\n    // Check if it's a built-in style name\n    const builtInStyles = ['default', 'tiktok-modern'];\n    if (builtInStyles.includes(value)) {\n        const stylePath = path.join(assetsFolder, value === 'default' ? 'captions.css' : `${value}.css`);\n        if (fs.existsSync(stylePath)) {\n            return stylePath;\n        } else {\n            throw new Error(`Built-in style '${value}' not found!`);\n        }\n    }\n    \n    // Check if it's a valid CSS file path\n    if (!value.endsWith('.css')) {\n        throw new Error(`Style must be either a built-in style name (${builtInStyles.join(', ')}) or a CSS file path ending with .css!`);\n    }\n    \n    const resolvedPath = path.resolve(value);\n    if (!fs.existsSync(resolvedPath)) {\n        throw new Error(`CSS file not found: ${resolvedPath}`);\n    }\n    \n    return resolvedPath;\n}\n\nconst program = new Command();\n\nprogram\n    .name('pupcaps')\n    .description('Tool to add stylish captions to your video.')\n    .version(packageJson.version)\n    .argument('<file>', 'Path to the input SubRip Subtitle (.srt) file.', assertFileExtension('.srt'))\n    .option('-o, --output <file>',\n        'Full or relative path where the created Films Apple QuickTime (MOV) file should be written. ' +\n        'By default, it will be saved in the same directory as the input subtitle file.',\n        assertFileExtension('.mov'))\n    .option('-w, --width <number>',\n        'Width of the video in pixels.',\n        parseIntAndAssert(assertPositive('Width')),\n        1080)\n    .option('-h, --height <number>',\n        'Height of the video in pixels.',\n        parseIntAndAssert(assertPositive('Height')),\n        1920)\n    .option('-r, --fps <number>',\n        'Specifies the frame rate (FPS) of the output video. Valid values are between 1 and 60.',\n        parseIntAndAssert(assertMinMax('FPS', 1, 60)),\n        30)\n    .option('-s, --style <style>',\n        'Style for captions. Can be a built-in style name (default, tiktok-modern) or ' +\n        'a full/relative path to a .css file. If not provided, default styles will be used.',\n        validateStyleOption)\n    .option('-a, --animate',\n        'Records captions with CSS3 animations. ' +\n        'Note: The recording will run for the entire duration of the video. ' +\n        'Use this option only if your captions involve CSS3 animations.')\n    .option('--preview',\n        'Prevents the script from generating a video file. ' +\n        'Instead, captions are displayed in the browser for debugging and preview purposes.')\n    .action((inputFile, options: any) => {\n        if (!options.output) {\n            const fileBasename = (inputFile as any as string).slice(0, -4);\n            options.output = `${fileBasename}.mov`;\n        }\n\n        if (!options.style) {\n            options.style = defaultStylesCss;\n        }\n    });\n\nexport function parseArgs(): Args {\n    program.parse();\n    const opts = program.opts() as any;\n\n    return {\n        srtInputFile: program.args[0],\n        movOutputFile: opts.output,\n        videoWidth: opts.width,\n        videoHeight: opts.height,\n        fps: opts.fps,\n        styleFile: opts.style,\n        css3Animations: opts.animate,\n        isPreview: opts.preview,\n    };\n}\n\nexport function printArgs(args: Args) {\n    const styles = args.styleFile === defaultStylesCss\n        ? '(Default)'\n        : args.styleFile;\n\n    const srt = `\n    Output:     ${args.movOutputFile}\n    Width:      ${args.videoWidth} px\n    Height:     ${args.videoHeight} px\n    FPS:        ${args.fps}\n    Styles:     ${styles}\n    Animations: ${ args.css3Animations ? 'yes' : 'no' }\n    `;\n\n    console.log(srt);\n}\n\nexport function createProgressBar(): cliProgress.SingleBar {\n    return new cliProgress.SingleBar({\n        format: 'Progress |{bar}| {percentage}% || {value}/{total} Captions',\n        barCompleteChar: '\\u2588',\n        barIncompleteChar: '\\u2591',\n        hideCursor: true,\n    }, cliProgress.Presets.shades_classic);\n}","import * as tmp from 'tmp';\r\nimport * as path from 'path';\r\nimport {writeFileSync, copyFileSync, rmSync, mkdirSync, readdirSync} from 'fs';\r\nimport {Caption} from '../common/captions';\r\nimport {Args} from './cli';\r\nimport {indexHtml, indexJs, nodeModules} from './assets';\r\nimport {PlayerArgs} from '../common/player-args';\r\n\r\nexport class WorkDir {\r\n    private readonly workDir = tmp.dirSync({ template: 'pupcaps-XXXXXX' });\r\n\r\n    constructor(private readonly captions: Caption[],\r\n                private readonly args: Args) {\r\n    }\r\n\r\n    public setup(): string {\r\n        const index = path.join(this.workDir.name, 'index.html');\r\n\r\n        this.safeCopy(indexHtml, index);\r\n        this.safeCopy(indexJs, path.join(this.workDir.name, 'index.js'));\r\n        this.safeCopy(this.args.styleFile, path.join(this.workDir.name, 'captions.css'));\r\n        this.copyDirectory(nodeModules, path.join(this.workDir.name, 'node_modules'));\r\n\r\n        this.setupCaptions();\r\n        this.setupPlayerArgs();\r\n        this.setupVideoSizeCss();\r\n\r\n        mkdirSync(this.screenShotsDir);\r\n\r\n        return index;\r\n    }\r\n\r\n    public clear() {\r\n        rmSync(this.workDir.name, { recursive: true, force: true });\r\n    }\r\n\r\n    public get screenShotsDir(): string {\r\n        return path.join(this.workDir.name, 'screenshots');\r\n    }\r\n\r\n    public get rootDir(): string {\r\n        return this.workDir.name;\r\n    }\r\n\r\n    private safeCopy(src: string, dest: string): void {\r\n        try {\r\n            // Create the target directory if it doesn't exist\r\n            mkdirSync(path.dirname(dest), { recursive: true });\r\n            \r\n            // Copy with overwrite\r\n            copyFileSync(src, dest);\r\n            console.log(`Copied: ${src} → ${dest}`);\r\n        } catch (err: any) {\r\n            console.error(`Copy failed: ${err.message}`);\r\n            throw new Error(`Failed to copy files from ${src} to ${dest}. Check permissions.`);\r\n        }\r\n    }\r\n\r\n    private copyDirectory(src: string, dest: string): void {\r\n        try {\r\n            // Create the target directory\r\n            mkdirSync(dest, { recursive: true });\r\n            \r\n            // Get list of files and directories\r\n            const entries = readdirSync(src, { withFileTypes: true });\r\n            \r\n            for (const entry of entries) {\r\n                const srcPath = path.join(src, entry.name);\r\n                const destPath = path.join(dest, entry.name);\r\n                \r\n                if (entry.isDirectory()) {\r\n                    this.copyDirectory(srcPath, destPath);\r\n                } else {\r\n                    copyFileSync(srcPath, destPath);\r\n                }\r\n            }\r\n            console.log(`Directory copied: ${src} → ${dest}`);\r\n        } catch (err: any) {\r\n            console.error(`Directory copy failed: ${err.message}`);\r\n            throw new Error(`Failed to copy directory from ${src} to ${dest}. Check permissions.`);\r\n        }\r\n    }\r\n\r\n    private setupVideoSizeCss() {\r\n        const css= `#video {\r\n            width: ${this.args.videoWidth}px;\r\n            height: ${this.args.videoHeight}px;\r\n        }`;\r\n        const videoSizeFile = path.join(this.workDir.name, 'video.size.css');\r\n\r\n        writeFileSync(videoSizeFile, css);\r\n    }\r\n\r\n    private setupCaptions() {\r\n        const captionsJs = 'window.captions = ' + JSON.stringify(this.captions, null, 2);\r\n        const captionsJsFile = path.join(this.workDir.name, 'captions.js');\r\n\r\n        writeFileSync(captionsJsFile, captionsJs);\r\n    }\r\n\r\n    private setupPlayerArgs() {\r\n        const playerArgs: PlayerArgs = {\r\n            isPreview: this.args.isPreview,\r\n        };\r\n        const argsJs = 'window.playerArgs = ' + JSON.stringify(playerArgs, null, 2);\r\n        const argsJsFile = path.join(this.workDir.name, 'player.args.js');\r\n\r\n        writeFileSync(argsJsFile, argsJs);\r\n    }\r\n}","export class StatsPrinter {\n    private statsPrinted = false;\n\n    public print(stats: Object) {\n        const lines = Object\n            .entries(stats)\n            .map(([key, value]) => `${key}: ${value}`);\n\n        if (this.statsPrinted) {\n            process.stdout.write(`\\x1b[${lines.length}A`);  // Move up N lines\n        }\n\n        lines.forEach((line) => {\n            process.stdout.write(`\\r${line.padEnd(40)}\\n`); // Ensure the line is fully overwritten\n        });\n\n        this.statsPrinted = true;\n    }\n}","import ffmpeg, { setFfmpegPath } from 'fluent-ffmpeg';\nimport {Args} from './cli';\n\n(() => {\n    try {\n        const ffmpegInstaller = require('@ffmpeg-installer/ffmpeg');\n        setFfmpegPath(ffmpegInstaller!.path);\n    } catch (error) {\n        console.warn('Impossible to install FFMpeg. Use system-provided ffmpeg.');\n    }\n})();\n\nexport abstract class AbstractRenderer {\n    protected constructor(protected readonly args : Args) {\n    }\n\n    public abstract startEncoding(): void;\n    public abstract endEncoding(): void;\n\n    protected baseFfmpegCommand(): ffmpeg.FfmpegCommand {\n        return ffmpeg()\n            .outputOptions([\n                '-c:v prores_ks',           // codec for Films Apple QuickTime (MOV)\n                '-profile:v 4444',          // enable the best quality\n                '-pix_fmt yuva444p10le',    // lossless setting\n                '-q:v 0',                   // lossless setting\n                '-vendor ap10'              // ensures the output MOV file is compatible with Apple QuickTime\n            ])\n            .output(this.args.movOutputFile);\n    }\n}","import {Args} from './cli';\nimport {PNG, PNGWithMetadata} from 'pngjs';\nimport * as path from 'path';\nimport {appendFileSync, writeFileSync} from 'fs';\nimport {WorkDir} from './work-dir';\nimport {Caption} from '../common/captions';\nimport {StatsPrinter} from './stats-printer';\nimport {AbstractRenderer} from './abstract-renderer';\n\nexport class StepRenderer extends AbstractRenderer {\n    private readonly framesFileName: string;\n    private readonly emptyFrameFileName: string;\n\n    constructor(args : Args,\n                private readonly workDir: WorkDir) {\n        super(args);\n        this.framesFileName = path.join(workDir.screenShotsDir, 'frames.txt');\n        this.emptyFrameFileName = path.join(workDir.screenShotsDir, 'empty.png');\n    }\n\n    public startEncoding() {\n        const empty = new PNG({\n            width: this.args.videoWidth,\n            height: this.args.videoHeight,\n            colorType: 6,\n        });\n        writeFileSync(this.emptyFrameFileName, PNG.sync.write(empty));\n    }\n\n    public addEmptyFrame(durationMs?: number) {\n        let frameDef = `file '${this.emptyFrameFileName}'\\n`;\n\n        if (durationMs) {\n            const durationSec = durationMs / 1000;\n            frameDef += `duration ${durationSec}\\n`;\n        }\n\n        appendFileSync(this.framesFileName, frameDef, 'utf8');\n    }\n\n    public addFrame(caption: Caption, png: PNGWithMetadata) {\n        const screenShotFileName = path.join(this.workDir.screenShotsDir, `screenshot_${caption.index}.png`);\n        writeFileSync(screenShotFileName, PNG.sync.write(png));\n\n        const durationSec = (caption.endTimeMs - caption.startTimeMs) / 1000;\n\n        appendFileSync(\n            this.framesFileName,\n            `file '${screenShotFileName}'\\nduration ${durationSec}\\n`,\n            'utf8');\n    }\n\n    public async endEncoding() {\n        console.log(`Encoding ${this.args.movOutputFile}...\\n`);\n        const statsPrinter = new StatsPrinter();\n\n        await new Promise((resolve, reject) => {\n            this.baseFfmpegCommand()\n                .input(this.framesFileName)\n                .inputOptions([\n                    '-f concat',    // concat frames from the frame list\n                    '-safe 0'       // to prevent errors related to unsafe filenames\n                ])\n                .outputOptions([\n                    `-vf fps=fps=${this.args.fps}`,  // Framerate\n                ])\n                .on('progress', (progress: Object) => {\n                    statsPrinter.print(progress);\n                })\n                .on('end', () => {\n                    console.log(`${this.args.movOutputFile} encoded`);\n                    resolve(this.args.movOutputFile);\n                })\n                .on('error', (err: any) => {\n                    reject(err);\n                })\n                .run();\n        });\n    }\n}","import * as puppeteer from 'puppeteer';\nimport {Args} from './cli';\n\nconst MAX_INT_32 = (2 ** 31) - 1;\n\nexport abstract class AbstractRecorder {\n    protected browser: puppeteer.Browser | null = null;\n    protected page: puppeteer.Page | null = null;\n\n    protected constructor(protected readonly args: Args) {\n    }\n\n    public abstract recordCaptionsVideo(indexHtml: string): Promise<void>;\n\n    protected async launchBrowser(indexHtml: string): Promise<puppeteer.ElementHandle | null> {\n        this.browser = await puppeteer.launch({\n            args: [\n                '--disable-web-security',           // Disable CORS\n                '--allow-file-access-from-files',   // Allow file access\n            ],\n            headless: true,\n            protocolTimeout: MAX_INT_32,\n        });\n        this.page = await this.browser.newPage();\n        await this.page.goto(`file://${indexHtml}`);\n        await this.page.setViewport({\n            width: this.args.videoWidth,\n            height: this.args.videoHeight,\n        });\n        await this.page.evaluate(() => {\n            return window.ready;\n        });\n\n        return this.page.$('#video');\n    }\n}","import * as puppeteer from 'puppeteer';\nimport {RealTimeRenderer} from './real-time-renderer';\nimport {Args} from './cli';\nimport {AbstractRecorder} from './abstract-recorder';\n\nexport class RealTimeRecorder extends AbstractRecorder {\n    constructor(args: Args,\n                private readonly videoRenderer: RealTimeRenderer) {\n        super(args);\n    }\n\n    public async recordCaptionsVideo(indexHtml: string) {\n        try {\n            await this.launchBrowser(indexHtml);\n            const cdpSession = await this.page!.createCDPSession();\n\n            await cdpSession.send(\n                'Emulation.setDefaultBackgroundColorOverride',\n                { color: { r: 0, g: 0, b: 0, a: 0 } }\n            );\n            await cdpSession.send('Animation.setPlaybackRate', {\n                playbackRate: 1,\n            });\n\n            cdpSession.on('Page.screencastFrame',\n                (frame) => this.handleScreenCastFrame(cdpSession, frame));\n\n            this.videoRenderer.startEncoding();\n\n            await cdpSession.send('Page.startScreencast', {\n                everyNthFrame: 1,\n                format: 'png',\n                quality: 100,\n            });\n\n            await this.page!.evaluate(() => {\n                return new Promise<void>((resolve) => {\n                    window.Player.onStop = resolve;\n                    window.Player.play();\n                })\n            });\n\n            await cdpSession.send('Page.stopScreencast');\n\n            this.videoRenderer.endEncoding();\n        } catch (error) {\n            console.error('Error during Puppeteer operation:', error);\n        } finally {\n            await this.browser?.close();\n        }\n    }\n\n    private async handleScreenCastFrame(cdpSession: puppeteer.CDPSession,\n                                        frame: puppeteer.Protocol.Page.ScreencastFrameEvent) {\n        const { sessionId, data } = frame;\n        await cdpSession.send('Page.screencastFrameAck', { sessionId });\n        const frameBuffer = Buffer.from(data, 'base64');\n        this.videoRenderer.addFrame(frameBuffer);\n    }\n}","export class FPSTicker {\n    private readonly interval: number;\n    private lastTime: number = 0;\n    private onTick: (deltaTime: number) => void = () => {};\n    private timeoutId: NodeJS.Timeout | null = null;\n\n    constructor(fps: number) {\n        this.interval = 1000 / fps;\n    }\n\n    public start(onTick: (deltaTime: number) => void = () => {}) {\n        this.onTick = onTick;\n        this.lastTime = Date.now();\n        this.tick();\n    }\n\n    public stop() {\n        clearTimeout(this.timeoutId!);\n    }\n\n    private tick() {\n        const now = Date.now();\n        const deltaTime = now - this.lastTime;\n\n        if (deltaTime >= this.interval) {\n            this.lastTime = now - (deltaTime % this.interval);  // Adjust for drift\n            this.onTick(deltaTime);\n        }\n\n        this.timeoutId = setTimeout(() => this.tick(), this.interval - (Date.now() - this.lastTime));\n    }\n}","import {PassThrough} from 'stream';\nimport {PNG} from 'pngjs';\nimport {Args} from './cli';\nimport {StatsPrinter} from './stats-printer';\nimport {AbstractRenderer} from './abstract-renderer';\nimport {FPSTicker} from './fps-ticker';\n\nexport class RealTimeRenderer extends AbstractRenderer {\n    private inputStream: PassThrough | null = null;\n    private lastFrame: Buffer;\n    private readonly ticker: FPSTicker;\n\n    constructor(args: Args) {\n        super(args);\n        const empty = new PNG({\n            width: this.args.videoWidth,\n            height: this.args.videoHeight,\n            colorType: 6,\n        });\n        this.lastFrame = PNG.sync.write(empty);\n        this.ticker = new FPSTicker(args.fps);\n    }\n\n    public startEncoding() {\n        this.inputStream = new PassThrough();\n        const statsPrinter = new StatsPrinter();\n\n        const command = this.baseFfmpegCommand()\n            .input(this.inputStream)\n            .inputOptions([\n                '-f image2pipe',                                        // Format of input frames\n                '-pix_fmt yuva444p10le',                                // Lossless setting\n                `-s ${this.args.videoWidth}x${this.args.videoHeight}`,  // Frame size\n                `-r ${this.args.fps}`,                                  // Framerate\n            ])\n            .outputOptions([\n                `-vf fps=fps=${this.args.fps}`,     // Framerate\n            ])\n            .on('start', () => {\n                console.log('FFmpeg process started.');\n            })\n            .on('progress', (progress) => {\n                statsPrinter.print(progress);\n            })\n            .on('end', () => {\n                console.log('FFmpeg process completed.');\n            })\n            .on('error', (err) => {\n                console.error('An error occurred:', err.message);\n            });\n\n        command.run();\n\n        // Produce frames in required rate\n        this.ticker.start(() => {\n            this.inputStream!.write(this.lastFrame);\n        });\n    }\n\n    public addFrame(frame: Buffer) {\n        this.lastFrame = frame;\n    }\n\n    public endEncoding() {\n        this.ticker.stop();\n        this.inputStream!.end();\n    }\n}","export class Timecode {\n    public readonly hours: number;\n    public readonly minutes: number;\n    public readonly seconds: number;\n    public readonly millis: number;\n\n    constructor(millis: number) {\n        this.millis = millis % 1000;\n\n        this.hours = Math.floor(millis / 3_600_000);\n        const remainingMillisAfterHours = millis % 3_600_000;\n        this.minutes = Math.floor(remainingMillisAfterHours / 60_000);\n        const remainingMillisAfterMinutes = remainingMillisAfterHours % 60_000;\n        this.seconds = Math.floor(remainingMillisAfterMinutes / 1000);\n    }\n\n    public get hh(): string {\n        return String(this.hours).padStart(2, '0');\n    }\n\n    public get mm(): string {\n        return String(this.minutes).padStart(2, '0');\n    }\n\n    public get ss(): string {\n        return String(this.seconds).padStart(2, '0');\n    }\n    public get SSS(): string {\n        return String(this.millis).padStart(3, '0');\n    }\n\n    public get asString(): string {\n        return `${this.hh}:${this.mm}:${this.ss},${this.SSS}`;\n    }\n}\n\nexport function toMillis(timecodes: string | null): number {\n    if (!timecodes) {\n        throw new Error('Timecode is null or undefined');\n    }\n    \n    const parts = timecodes.split(/[:,]/).map(Number);\n\n    if (parts.length !== 4) {\n        throw new Error(`Invalid timecode format: ${timecodes}. Expected format: HH:MM:SS,mmm`);\n    }\n\n    const hours = parts[0];\n    const minutes = parts[1];\n    const seconds = parts[2];\n    const milliseconds = parts[3];\n\n    if (isNaN(hours) || isNaN(minutes) || isNaN(seconds) || isNaN(milliseconds)) {\n        throw new Error(`Invalid timecode values: ${timecodes}. All parts must be numbers.`);\n    }\n\n    return hours * 3_600_000    // hours to millis\n        + minutes * 60_000      // minutes to millis\n        + seconds * 1000        // second to millis\n        + milliseconds;\n}","import {toMillis} from './timecodes';\n\nconst indexLinePattern = /^\\d+$/;\nconst timecodesLinePattern = /^(\\d{2}:\\d{2}:\\d{2},\\d{3}) --> (\\d{2}:\\d{2}:\\d{2},\\d{3})$/;\nconst highlightedWordPattern = /^\\[(.+)](?:\\((\\w+)\\))?$/;\n\nexport interface Word {\n    rawWord: string;\n    isHighlighted: boolean;\n    isBeforeHighlighted: boolean;\n    isAfterHighlighted: boolean;\n    highlightClass?: string;\n}\n\nexport interface Caption {\n    index: number;\n    startTimeMs: number;\n    endTimeMs: number;\n    words: Word[];\n}\n\n/**\n * Groups captions with same words into groups.\n * @param captions captions\n * @returns groups of captions with same words\n */\nexport function captionGroups(captions: Caption[]): Caption[][] {\n    const groups: Caption[][] = [];\n    let lastCaption: Caption | null = null;\n    let lastGroup: Caption[] = [];\n\n    for (const caption of captions) {\n        if (lastCaption && !haveSameWords(caption, lastCaption!)) {\n            groups.push(lastGroup);\n            lastGroup = [];\n        }\n\n        lastGroup.push(caption);\n        lastCaption = caption;\n    }\n\n    if (lastGroup.length) {\n        groups.push(lastGroup);\n    }\n\n    return groups;\n}\n\nexport function haveSameWords(caption1: Caption, caption2: Caption): boolean {\n    if (caption1.words.length != caption2.words.length) {\n        return false;\n    }\n\n    for (let i =0; i < caption1.words.length; i++) {\n        if (caption1.words[i].rawWord != caption2.words[i].rawWord) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function readCaptions(srtContent: string): Caption[] {\n    const lines = srtContent.split('\\n').map(line => line.trim());\n    const captions: Caption[] = [];\n\n    let index: number = 0;\n    let timecodesStart: string | null = null;\n    let timecodesEnd: string | null = null;\n    let captionText: string[] = [];\n\n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i];\n        let match;\n        \n        // Skip empty lines\n        if (line.length === 0) {\n            // If we have accumulated caption text, process it\n            if (captionText.length > 0 && timecodesStart && timecodesEnd) {\n                try {\n                    const start = toMillis(timecodesStart);\n                    const end = toMillis(timecodesEnd);\n                    const fullText = captionText.join(' ');\n                    const words = readWords(fullText);\n\n                    captions.push({\n                        index,\n                        words,\n                        startTimeMs: start,\n                        endTimeMs: end,\n                    });\n                } catch (error) {\n                    console.error(`Error parsing timecodes for caption ${index}: ${error instanceof Error ? error.message : String(error)}`);\n                    console.warn(`Skipping caption. Start: \"${timecodesStart}\", End: \"${timecodesEnd}\", Text: \"${captionText.join(' ')}\"`);\n                }\n                \n                // Reset for next caption\n                captionText = [];\n                timecodesStart = null;\n                timecodesEnd = null;\n            }\n            continue;\n        }\n        \n        if ((match = line.match(indexLinePattern))) {\n            // New caption index\n            index = Number(line);\n        } else if ((match = line.match(timecodesLinePattern))) {\n            // Timecodes line\n            timecodesStart = match[1];\n            timecodesEnd = match[2];\n        } else {\n            // This should be caption text\n            if (!timecodesStart || !timecodesEnd) {\n                console.warn(`Skipping caption at index ${index}: Missing timecodes. Line: \"${line}\"`);\n                continue;\n            }\n            captionText.push(line);\n        }\n    }\n    \n    // Handle last caption if file doesn't end with empty line\n    if (captionText.length > 0 && timecodesStart && timecodesEnd) {\n        try {\n            const start = toMillis(timecodesStart);\n            const end = toMillis(timecodesEnd);\n            const fullText = captionText.join(' ');\n            const words = readWords(fullText);\n\n            captions.push({\n                index,\n                words,\n                startTimeMs: start,\n                endTimeMs: end,\n            });\n        } catch (error) {\n            console.error(`Error parsing timecodes for caption ${index}: ${error instanceof Error ? error.message : String(error)}`);\n            console.warn(`Skipping caption. Start: \"${timecodesStart}\", End: \"${timecodesEnd}\", Text: \"${captionText.join(' ')}\"`);\n        }\n    }\n\n    return captions;\n}\n\nexport function readWords(text: string): Word[] {\n    const words = splitText(text);\n    const highlightedIndex = words.findIndex(word => word.match(highlightedWordPattern));\n\n    const res: Word[] = [];\n\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const match = word.match(highlightedWordPattern);\n        const rawWord = match ? match[1] : word;\n        const highlightClass = match && match[2] ? match[2] : null;\n\n        const isHighlighted = Boolean(match);\n        const isBeforeHighlighted = Boolean(~highlightedIndex && !isHighlighted && i < highlightedIndex);\n        const isAfterHighlighted = Boolean(~highlightedIndex && !isHighlighted && i > highlightedIndex);\n\n        const wordObject: Word = {\n            rawWord,\n            isHighlighted,\n            isBeforeHighlighted,\n            isAfterHighlighted,\n        };\n\n        if (highlightClass) {\n            wordObject.highlightClass = highlightClass;\n        }\n\n        res.push(wordObject);\n    }\n\n    return res;\n}\n\nexport function splitText(text: string): string[] {\n    const words: string[] = [];\n\n    let currentWord = '';\n    let isCurrentHighlighted = false;\n\n    for (let i = 0; i < text.length; i++) {\n        const char = text[i];\n        const isWhitespace = /^\\s$/.test(char);\n        const isPunctuation = /[,.!?]/.test(char);\n\n        if (!isWhitespace) {\n            if (!isPunctuation) {\n                currentWord += char;\n                switch (char) {\n                    case '[':\n                    case '(':\n                        isCurrentHighlighted = true;\n                        break;\n                    case ']':\n                    case ')':\n                        isCurrentHighlighted = false;\n                        break;\n                }\n            } else {\n                if (currentWord) {\n                    currentWord += char;\n                } else {\n                    // Attach punctuation mark to the previous word\n                    words[words.length - 1] += ' ' + char;\n                }\n            }\n        } else {\n            // char is a whitespace\n            if (isCurrentHighlighted) {\n                currentWord += char;\n            } else if (currentWord) {\n                words.push(currentWord);\n                currentWord = '';\n            }\n        }\n    }\n\n    if (currentWord) {\n        words.push(currentWord);\n    }\n\n    return words;\n}","import * as puppeteer from 'puppeteer';\nimport * as cliProgress from 'cli-progress';\nimport {PNG, PNGWithMetadata} from 'pngjs';\nimport {Caption, captionGroups} from '../common/captions';\nimport {StepRenderer} from './step-renderer';\nimport {Args} from './cli';\nimport {AbstractRecorder} from './abstract-recorder';\n\nexport class StepRecorder extends AbstractRecorder {\n    constructor(args: Args,\n                private readonly captions: Caption[],\n                private readonly renderer: StepRenderer,\n                private readonly progressBar: cliProgress.SingleBar) {\n        super(args);\n    }\n\n    public async recordCaptionsVideo(indexHtml: string) {\n        const groups = captionGroups(this.captions);\n\n        this.progressBar.start(this.captions.length, 0);\n\n        try {\n            const videoElem = await this.launchBrowser(indexHtml);\n\n            this.renderer.startEncoding();\n\n            // Add empty frame before captions starts\n            const beginningTime = this.captions[0].startTimeMs;\n            this.renderer.addEmptyFrame(beginningTime);\n\n            for (let i = 0; i < groups.length; i++) {\n                const captionGroup = StepRecorder.adjustCaptionsDuration(groups[i]);\n\n                for (const caption of captionGroup) {\n                    await this.nextStep();\n                    const screenShot = await this.takeScreenShot(videoElem!);\n                    this.renderer.addFrame(caption, screenShot);\n                    this.progressBar.increment();\n                }\n\n                // Add delay before the next caption group\n                if (i < groups.length - 1) {\n                    const nextCaptionGroup = groups[i + 1];\n                    const lastCaption = captionGroup[captionGroup.length - 1];\n                    const nextCaption = nextCaptionGroup[0];\n\n                    const idleDelay = nextCaption.startTimeMs - lastCaption.endTimeMs;\n                    if (idleDelay) {\n                        this.renderer.addEmptyFrame(idleDelay);\n                    }\n                }\n            }\n\n            this.progressBar.stop();\n            await this.renderer.endEncoding();\n        } catch (error) {\n            console.error('Error during Puppeteer operation:', error);\n        } finally {\n            await this.browser?.close();\n        }\n    }\n\n    private async nextStep() {\n        await this.page!.evaluate(() => {\n            window.Player.next();\n        });\n    }\n\n    private async takeScreenShot(elem: puppeteer.ElementHandle): Promise<PNGWithMetadata> {\n        const screenshotBuffer = await elem.screenshot({\n            encoding: 'binary',\n            omitBackground: true,\n        });\n        return PNG.sync.read(Buffer.from(screenshotBuffer));\n    }\n\n    private static adjustCaptionsDuration(captionGroup: Caption[]): Caption[] {\n        if (captionGroup.length < 2) {\n            return captionGroup;\n        }\n\n        const adjustedGroup: Caption[] = [];\n\n        for (let i = 0; i < captionGroup.length - 1; i++) {\n            const caption = Object.assign({}, captionGroup[i]);\n            const nextCaption = captionGroup[i + 1];\n            caption.endTimeMs = nextCaption.startTimeMs;\n            adjustedGroup.push(caption);\n        }\n\n        adjustedGroup.push(captionGroup[captionGroup.length - 1]);\n\n        return adjustedGroup;\n    }\n}","import {createServer} from 'http-server';\n\nexport class WebServer {\n    constructor(private readonly rootDir: string) {\n    }\n\n    public async start(relativePath = '') {\n        return new Promise<void>(async (resolve, reject) => {\n            try {\n                const server = createServer({ root: this.rootDir });\n                const port = await WebServer.getFreePort();\n\n                server.listen(port, async () => {\n                    try {\n                        const childProcess = await WebServer.openUrl(`http://127.0.0.1:${port}${relativePath}`);\n\n                        childProcess.on('close', () => {\n                            server.close(() => {\n                                resolve();\n                            });\n                        });\n                    } catch (error) {\n                        reject(error);\n                    }\n                });\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n\n    private static async getFreePort(): Promise<number> {\n        const { default: getPort } = await import('get-port');\n        return getPort();\n    }\n\n    private static async openUrl(url: string) {\n        const { default: open } = await import('open');\n        return open(url, { wait: true });\n    }\n}","import {readFileSync} from 'fs';\nimport {Args, createProgressBar, parseArgs, printArgs} from './cli';\nimport {WorkDir} from './work-dir';\nimport {StepRenderer} from './step-renderer';\nimport {RealTimeRecorder} from './real-time-recorder';\nimport {RealTimeRenderer} from './real-time-renderer';\nimport {StepRecorder} from './step-recorder';\nimport {AbstractRecorder} from './abstract-recorder';\nimport {Caption, readCaptions} from '../common/captions';\nimport {WebServer} from '../common/web-server';\n\nfunction parseCaptions(srtCaptionsFile: string): Caption[] {\n    const captionsSrc = readFileSync(srtCaptionsFile, 'utf-8');\n    return readCaptions(captionsSrc);\n}\n\nfunction createRecorder(args: Args, captions: Caption[], workDir: WorkDir): AbstractRecorder {\n    if (args.css3Animations) {\n        const realTimeRenderer = new RealTimeRenderer(args);\n        return new RealTimeRecorder(args, realTimeRenderer);\n    } else {\n        const progressBar = createProgressBar();\n        const stepRenderer = new StepRenderer(args, workDir);\n        return  new StepRecorder(args, captions, stepRenderer, progressBar);\n    }\n}\n\nconst cliArgs = parseArgs();\nconst captions = parseCaptions(cliArgs.srtInputFile);\nconst workDir = new WorkDir(captions, cliArgs);\n\n(async () => {\n    try {\n        const indexHtml = workDir.setup();\n        printArgs(cliArgs);\n\n        if (!cliArgs.isPreview) {\n            const recorder = createRecorder(cliArgs, captions, workDir);\n            await recorder.recordCaptionsVideo(indexHtml);\n        } else {\n            console.log('Launching preview server...');\n            const previewServer = new WebServer(workDir.rootDir);\n            await previewServer.start();\n        }\n        console.log('Done!');\n    } catch (err) {\n        console.error('Error occurred:', err);\n    } finally {\n        workDir.clear();\n    }\n})();\n"],"names":["program","path","fs","cliProgress","tmp","mkdirSync","rmSync","copyFileSync","readdirSync","writeFileSync","setFfmpegPath","PNG","appendFileSync","puppeteer","PassThrough","createServer","readFileSync"],"mappings":"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","x_google_ignoreList":[0,1]}